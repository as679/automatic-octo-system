#cloud-config
users:
  - name: training
    lock_passwd: true
    gecos: Cloud User
    groups: [wheel, adm, systemd-journal]
    sudo: ["ALL=(ALL) NOPASSWD:ALL"]
    shell: /bin/bash
    ssh-authorized-keys:
      - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCkUH0LmRDDoAbqWcnbOCZdta4hy3JW1ahqECKXU7+tO9AgG3wP/1E1XncY1QP2r88iQaCa4vgKbFDvt56cdQLDf8GTr2Xb9HWtGCcEuLvSlKk3TDNt4bL3fNb2NIs+0iQ4L7eEY8zkpAXs5faZ2GN6L/ES/u7wuoZvHie1DxQPWxJYo9gkLu4/m2XDZ+2Fcr99gm3FnmPUo3nGccmnpZEbBldwWmydv2gmsHEyMSVapzarIHIsXmjVDhAVmdsUq8tsuWHhXi2v1LF51mY4i5c2rbV2Pa0CZcHam8QJ2cMk9mdOTmR0SBAJd/JDD8HmGmfx3nFF9lp2qiglkKjXgr8d

write_files:
  - content: |
        #!/bin/sh
        hostnamectl set-hostname --static ${hostname}
        echo 'preserve_hostname: true' >> /etc/cloud/cloud.cfg
        ifup eth1
        cat /opt/lab_hosts >> /etc/hosts
        mv /opt/training_id /home/training/.ssh/id_rsa
        chown training.training /home/training/.ssh/id_rsa
        yum install ansible -y
        yum install git -y
        cp /opt/bootstrap_inventory /etc/ansible/hosts
        sed -i 's/^#\(host_key_checking = False\)/\1/' /etc/ansible/ansible.cfg
        /root/update_avi_admin.py
        sudo su training -c 'scp -o StrictHostKeyChecking=no /tmp/update_avi_ctrl.sh admin@ctrl1:/tmp/'
        sudo su training -c 'ssh -o StrictHostKeyChecking=no admin@ctrl1 "sudo -S <<< \"Passw0rd\" /tmp/update_avi_ctrl.sh"'
        touch /tmp/cloud-init.done
    path: /opt/bootstrap.sh
    permissions: 0755
  - content: |
        DEVICE=eth1
        BOOTPROTO=dhcp
        ONBOOT=yes
        DEFROUTE=no
    path: /etc/sysconfig/network-scripts/ifcfg-eth1
    permissions: 0644
  - content: |
        172.16.0.0/16 via 172.16.1.1 dev eth1
    path: /etc/sysconfig/network-scripts/route-eth1
    permissions: 0644
  - content: |
        172.16.1.11 ctrl1
        172.16.2.21 server1
        172.16.2.22 server2
    path: /opt/lab_hosts
    permissions: 0755
  - content: |
        #!/usr/bin/python
        import requests
        from time import sleep
        session = requests.Session()
        portal_up = False
        while not portal_up:
          print 'SLEEPING...'
          sleep(10)
          try:
            session.get('http://172.16.1.11/')
          except requests.exceptions.SSLError:
            portal_up = True
            print "PORTAL_UP"
            pass
          except:
            pass
        login_status = session.post('https://172.16.1.11/login', verify=False, data={'username': 'admin', 'password': '58NFaGDJm(PJH0G'}).status_code
        print 'STATUS_CODE: %d' % login_status
        while login_status != 200:
          print 'SLEEPING...'
          sleep(10)
          login_status = session.post('https://172.16.1.11/login', verify=False, data={'username': 'admin', 'password': '58NFaGDJm(PJH0G'}).status_code
          print 'STATUS_CODE: %d' % login_status
        session.headers.update({'Referer': 'https://172.16.1.11/'})
        session.headers.update({'X-CSRFToken': session.cookies['csrftoken']})
        session.put('https://172.16.1.11/api/useraccount', verify=False, json={'username': 'admin', 'password': 'Passw0rd', 'old_password': '58NFaGDJm(PJH0G'})
    path: /root/update_avi_admin.py
    permissions: 0755
  - content: |
        #!/bin/bash
        cat << END >> /etc/network/interfaces
        auto eth1
        iface eth1 inet dhcp
          up ip route add 172.16.0.0/16 via 172.16.1.1 dev eth0
          up ip route change default via 172.16.0.1 dev eth1
        END
        ifup eth1
    path: /tmp/update_avi_ctrl.sh
    permissions: 0755
  - content: |
        ${pkey}
    path: /opt/training_id
    permissions: 0600
  - content: |
        [servers]
        server1
        server2
        [controllers]
        ctrl1
    path: /opt/bootstrap_inventory
    permissions: 0755

runcmd:
  - /opt/bootstrap.sh
